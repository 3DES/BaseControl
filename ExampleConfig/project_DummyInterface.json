{

    "MqttBridge":
    {
        "class":      "MqttBridge.MqttBridge.MqttBridge",
        "interfaces":
        {
            "Mosquitto":
            {
                "connection":   "Interface.Ethernet.MqttBrokerInterface.MqttBrokerInterface",
                "port":         1883,
                "sendRetained": false                       # for tests always send non-retained
            }
        }
    },

    "Logger":
    {
     "projectName":   "AccuTester"
     },

    "WrEffektaWest":
    {
        "class":        "Inverter.EffektaController.EffektaController",
        "interfaces":
        {
            "UartWrEffektaWest":
            {
                #"connection":   "Interface.Uart.EffektaUartInterface.EffektaUartInterface",
                "connection":   "Interface.Dummy.DummyEffektaUartInterface.DummyEffektaUartInterface",
                "interface":    "COM4",
                "baudrate":     2400
            }
        }
    },

    "PowerPlant":
    {
        "class": "Worker.PowerPlant.PowerPlant",
        "managedEffektas": ["WrEffektaWest"],
        "socMonitorName": "SocMonitor",
        "bmsName": "Bms",
        #"inputs":"WdUsbRelais",
        "weatherName": "Wetter",                            # optional
        "initModeEffekta": "Auto"                   # Auto, Akku, Netz.    Fallback if SocMonitor just start up: Netz
    },

    "Bms":
    {
        "class":         "BMS.BasicBms.BasicBms",
        #"socMonitor": "SocMonitor",                                                 # optional socmonitor whose data will be merged with other bms, current will be added, percent will be a avg
        #"parameters":    {"vBal": 3.5},                                             # optional
        #"parameters":    {"vMin": 2.8, "vMax": 3.8, "vMinTimer": 60},               # optional 
        "parameters":    {"vMin": 2.8, "vMax": 3.8, "vMinTimer": 60, "vBal": 3.5},  # optional, vbal will manage relBalance. you can map it to a gpio, vmin rises an exception and set internal BmsEntladeFreigabe to false after vMinTimer time occured, vMax rises an exception after 10s
        "interfaces":
        {
            "BmsEins":
            {
                #"connection":   "Interface.Uart.WBmsUartInterface.WBmsUartInterface",
                "connection":   "Interface.Dummy.DummyWBmsUartInterface.DummyWBmsUartInterface",
                "interface":    "COM4",
                "baudrate":     2400
            },
            "BmsZwei":
            {
                #"connection":   "Interface.Uart.WBmsUartInterface.WBmsUartInterface",
                "connection":   "Interface.Dummy.DummyWBmsUartInterface.DummyWBmsUartInterface",
                "interface":    "COM4",
                "baudrate":     2400
            }
        }
    },

    "SocMonitor":
    {
        "class":        "GridLoad.SocMeter.SocMeter",
        "interfaces":
        {
            "UartSocMonitor":
            {
                #"connection":   "Interface.Uart.SocMeterUartInterface.SocMeterUartInterface",
                "connection":   "Interface.Dummy.DummySocMeterUartInterface.DummySocMeterUartInterface",
                "interface":    "COM4",
                "baudrate":     9600
            }
        }
    },

    "UsbRelais":
    {
        "class":        "GPIO.BasicUsbRelais.BasicUsbRelais",
        "gpioHandler": ["PowerPlant", "Bms"],
        "relMapping":{"relWr": ["Relay1", "Relay5"], "notExisting": "Relay5", "relBalance": "Relay3", "relPvAus": "Relay4", "relNetzAus": "Relay2"},
        "interfaces":
        {
            "UartUsbRelais":
            {
                #"connection":   "Interface.Uart.UsbRelaisUartInterface.UsbRelaisUartInterface",
                "connection":   "Interface.Dummy.DummyUartInterface.UartInterface",   # empty UArt Interface
                "interface":    "COM4",
                "baudrate":     115200
            }
        }
    },

    "WdUsbRelais":
    {
        "class":           "GPIO.BasicUsbRelais.BasicUsbRelais",
        "triggerThread":   "Bms",                                               # an external wd needs a trigger thread, only this thread is authorized to trigger the wd
        "gpioHandler": ["PowerPlant"],                                          # the usb relay object will subscribe to these gpio handlers to listen for relay commands 
        "relMapping":{"relWr": ["Relay1", "Relay5"], "notExisting": "Relay6", "relBalance": "Relay3", "relPvAus": "Relay4", "relNetzAus": "Relay2"},  # mapping of signal name to relay output
        #"relMapping":{"RelStufe1": "Relay0", "RelStufe2": "Relay1", "RelStufe3": "Relay2", "RelNichtHeizen": "Relay3", "relWr": "Relay4", "relPvAus": "Relay5", "RelLastAktiv": "Relay6"},  # mapping of signal name to relay output
        #"inputMapping":{"Input1":"inverterActive"},
        "interfaces":
        {
           "WdUartUsbRelais":
           {
                "connection":   "Interface.Dummy.DummyUartInterface.UartInterface",   # empty UArt Interface
                #"connection":   "Interface.Uart.WatchdogRelaisUartInterface.WatchdogRelaisUartInterface",
                "firmware":     "firmware.hex",
                #"avrdudePath":  "C:\\Program Files (x86)\\AVRDUDESS\\avrdude.exe",  # optional todo Pfad funktioniert nicht ohne escapen
                #"interface":    "/dev/serial/by-path/platform-fd500000.pcie-pci-0000:01:00.0-usb-0:1.3.2.4:1.0-port0",
                "interface":    "COM5",
                "baudrate":     9600
            }
        }
    },

#    "Pylontech":
#    {
#        "class":        "BMS.BasicBms.BasicBms",
#        "interfaces":
#        {
#            "PylontechInterface":
#            {
#                "connection":   "Interface.Uart.Pylontech485Interface.Pylontech485Interface",
#                "interface":    "COM7",
#                "battCount":    1,
#                "baudrate":     115200         # optional
#            }
#        }
#    },

#    "Jbd":
#    {
#        "class":        "BMS.BasicBms.BasicBms",
#        "interfaces":
#        {
#            "JbdInterface":
#            {
#                "connection":   "Interface.Uart.Jbd485Interface.Jbd485Interface",
#                "interface":    "COM7",
#                "battCount":    1
#            }
#        }
#    },

#    "Epever":
#    {
#        "class":        "Charger.GenericCharger.GenericCharger",
#        "interfaces":
#        {
#            "EpeverInterface":
#            {
#                #"connection":   "Interface.Uart.Epever485Interface.Epever485Interface",
#                "connection":   "Interface.Dummy.DummyChargerUartInterface.DummyChargerUartInterface",
#                "interface":    "COM12",
#                "floatVoltage": 52.7,          # optional, if both voltages are given we configure epever
#                "boostVoltage": 53.6,          # optional
#                "address":     1               # optional
#            }
#        }
#    },

#    "WatchDog":
#    {
#        "class":      "WatchDog.WatchDog.WatchDog",
#        "interfaces":
#        {
#        },
#        "setupTime":       20,              # additional time until first check if all threads and only these are registered to give the threads some time to come up (timeout will happen after setupTime + triggerTime + timeout)
#        "triggerTime":     10,              # after that time threads should start sending alive message to watch dog
#        "timeout":         10,              # n seconds timeout after ticker time, after triggerTime + timeout watch dog will raise an Exception
#        "warningTime":     3,               # if minimum measured remaining timeout time is less or equal warningTime log a warning to inform the user about critical timing
#        "expectThreads":                    # expected threads
#        [
#            "Logger",
#            "PowerPlant",
#            "Mosquitto",
#            "MqttBridge",
#            "WrEffektaWest",
#            "Bms",
#            "SocMonitor",
#            "UsbRelais"
#        ],
#        "ignoreThreads":                    # no timeout monitoring for these ones... but they have to be included in expectedThreads
#        [
#            "UartWrEffektaWest",
#            "BmsEins",
#            "BmsZwei",
#            "UartSocMonitor",
#            "UartUsbRelais",
#            "Wetter"
#        ],
#        "logUpTime":          60            # every 60 seconds create up time message
#    },

    "Wetter":
    {
        "class": "Weather.Weather.WetterOnline"
    },

    "@import": [
        "json/secure.json"
    ]

}

