{
    "MqttBridge":
    {
        "class":      "MqttBridge.MqttBridge.MqttBridge",
        "interfaces":
        {
            "Mosquitto":
            {
                "connection": "Interface.Ethernet.MqttBrokerInterface.MqttBrokerInterface",
                "server":     "localhost",
                "port":       1883
            }
        }
    },

    "WatchDog":
    {
        "class":      "WatchDog.WatchDog.WatchDog",
        "interfaces":
        {
            "WatchDogUart":
            {
                "connection": "Interface.Uart.UartInterface.UartInterface",
                "interface":  "/dev/ttyUSB0",
                "settings":   "19200,8,N,1"
            }
        },
        "setupTime":       20,              # additional time until first check if all threads and only these are registered to give the threads some time to come up (timeout will happen after setupTime + triggerTime + timeout)
        "triggerTime":     10,              # after that time threads should start sending alive message to watch dog
        "timeout":         10,              # n seconds timeout after ticker time, after triggerTime + timeout watch dog will raise an Exception
        "warningTime":     3,               # if minimum measured remaining timeout time is less or equal warningTime log a warning to inform the user about critical timing
        "expectThreads":                    # expected threads
        [
            "MqttBridge",
            "Logger",
            "PowerPlant",
            "Mosquitto",
            "WatchDogUart",
            "SignalMessenger"
        ],
        "ignoreThreads":                    # no timeout monitoring for these ones...
        [
            "WatchDogUart"                  
        ],
        "upTime":          60               # every 60 seconds create up time message
    },

    "Logger":
    {
        "class":       "Logger.Logger.Logger",      # optionally: Logger.LoggerOverwrite.LoggerOverwrite
        "queueLength": 500,                         # log queue length is 100 per default but can be enlarged if it gets critically filled up

        # Logger is the secret leading thread since it's the first thread that is set up, it gets some parameters and has to make it public!
        "projectName": "AccuControl"        # project name for MQTT topics (<projectName>/<threadName>/...)
    },

    "PowerPlant":
    {
        "class": "Worker.PowerPlant.PowerPlant"
    },

    "SignalMessenger":
    {
        "class": "Messenger.SignalMessenger.SignalMessenger",
        
        "executable":
        [
            ".\\\\signal-cli-0.11.4\\\\bin\\\\signal-cli.bat",             # from https://github.com/AsamK/signal-cli
            "-u",
            "+0111111111111",
            "jsonRpc"
        ],
        "emergency":  "+0222222222222",
        "trusted":
        [
            "+0222222222222",    # it makes sense that emergency number is also contained in trusted numbers but it is not necessary
            "+0333333333333",
            "+0444444444444"
        ],
        "aliveTime":  86400,     # 24 * 60 * 60 = 86400 seconds = once a day
        "disabled":   1          # only supported by uncritical tasks!
    },

    # an @import tag will always overwrite existing values with the content of the given file independent from its position in the json file!
    # it will be handled only if it has been given at highest level and not somewhere inside a sub element!
    "@import": [
        "./secure.json"
    ]
}

