{
    "PowerPlant":
    {
        "class": "Worker.PowerPlant.PowerPlant",
        "managedEffektas": ["WrEffektaWest"],
        "socMonitorName": "SocMonitor",
        "bmsName": "BMS",
        "weatherName": "Wetter",                            # optional
        "relaisNames": {"deviceName": "UsbRelais", "relWr1": "Relay4", "relWr2": "Relay3", "relPvAus": "Relay2", "relNetzAus": "Relay1"},
        "initModeEffekta": "Auto"                   # Auto, Akku, Netz.    Fallback if SocMonitor just start up: Netz
    },

# another example
#    "PowerPlant":
#    {
#        "class": "Worker.PowerPlant.PowerPlant",
#        "managedEffektas": ["WrEffektaWest"],
#        "socMonitorName": "Pylontech",
#        "bmsName": "Pylontech",
#        "weatherName": "Wetter",                            # optional
#        "relaisNames": {"deviceName": "UsbRelais", "relWr1": "Relay4", "relWr2": "Relay3", "relPvAus": "Relay2", "relNetzAus": "Relay1"},
#        "initModeEffekta": "Auto"                   # Auto, Akku, Netz.    Fallback if SocMonitor just start up: Netz
#    },

    "Logger":
    {
        "class":         "Logger.Logger.Logger",    # optionally: Logger.LoggerOverwrite.LoggerOverwrite
        #"messageFilter": "subscribed",              # regular expression usually for debugging since all messages will be filtered and only matching ones will be shown

        # Logger is the secret leading thread since it's the first thread that is set up, it gets some parameters and has to make it public!
        "projectName":   "AccuControl",              # project name for MQTT topics (<projectName>/<threadName>/...)
        "homeAutomation": "HomeAutomation.HomeAssistantDiscover.HomeAssistantDiscover"
    },


    "MqttBridge":
    {
        "class":      "MqttBridge.MqttBridge.MqttBridge",
        "interfaces":
        {
# If you have a real Mosquitto server enter here your connection
#            "Mosquitto":
#            {
#                "connection":   "Interface.Ethernet.MqttBrokerInterface.MqttBrokerInterface",
#                "server":       "localhost",
#                "port":         1883,
#                "user":         "user",
#                "password":     "password",
#                "sendRetained": true                       # for tests you can send not retained
#            }
        }
    },


#    "WatchDog":
#    {
#        "class":      "WatchDog.WatchDog.WatchDog",
#        "interfaces":
#        {
#            "WatchDogUart":
#            {
#                "connection":  "Interface.Uart.UartInterface.UartInterface",
#                #"interface":   "/dev/serial/by-id/usb-FTDI_FT232R_USB_UART_A9HSILDS-if00-port0",
#                "interface":   "COM6",
#                "baudrate":    9600, 
#                #"bytesize":    8,               # 5, 6, 7, 8
#                #"parity":      "N",             # [N]one, [O]dd, [E]ven, [M]ark, [S]pace
#                #"stopbits":    1.5              # 1, 1.5, 2
#                #"xonxoff":    1,               # on = 1, off = 0
#                #"rtscts":     1,               # on = 1, off = 0
#                #"timeout":    1,               # read timeout in seconds
#            }
#        },
#        "setupTime":       20,              # additional time until first check if all threads and only these are registered to give the threads some time to come up (timeout will happen after setupTime + triggerTime + timeout)
#        "triggerTime":     10,              # after that time threads should start sending alive message to watch dog
#        "timeout":         10,              # n seconds timeout after ticker time, after triggerTime + timeout watch dog will raise an Exception
#        "warningTime":     3,               # if minimum measured remaining timeout time is less or equal warningTime log a warning to inform the user about critical timing
#        "expectThreads":                    # expected threads
#        [
#            "MqttBridge",
#            "Logger",
#            "PowerPlant",
#            "Mosquitto",
#            "SignalMessenger"
#        ],
#        "ignoreThreads":                    # no timeout monitoring for these ones... but they have to be included in expectedThreads
#        [
#            "WatchDogUart"
#        ],
#        "logUpTime":          60            # every 60 seconds create up time message
#    },
#

#    "SignalMessenger":
#    {
#        "class": "Messenger.SignalMessenger.SignalMessenger",
#        
#        "executable":
#        [
#            ".\\\\signal-cli-0.11.4\\\\bin\\\\signal-cli.bat",             # from https://github.com/AsamK/signal-cli
#            "-u",
#            "+0111111111111",
#            "jsonRpc"
#        ],
#        "emergency":  "+0222222222222",
#        "trusted":
#        [
#            "+0222222222222",    # it makes sense that emergency number is also contained in trusted numbers but it is not necessary
#            "+0333333333333",
#            "+0444444444444"
#        ],
#        "restartLimit":     3,          # if singal-cli dies a restart cycle will contain these numbers of restart tries
#        "restartTime":      600,        # if singal-cli dies a restart cycle will be initiated, if the restart cycle was not successful the next one will be started after this time in seconds
#        "aliveTime":        86400,      # 24 * 60 * 60 = 86400 seconds = once a day
#        "disabled":         1
#    },

#    "EasyMeter":
#    {
#        "class":             "GridLoad.EasyMeter.EasyMeter",
#        "loadCycle":         900,                                   # new grid load information every 15 minutes
#        "messageInterval":   60,                                    # EasyMeter will send a message every 60 seconds (the one where the cycle has been changed will be marked with the flag updatePowerValue = True)
#        "gridLossThreshold": 120,                                   # no message for 120 seconds means grid loss
#        "conservativeDelta": 1000,                                  # if previous delivered energy delta was larger  than current one (delivered energy level is decreasing) decrement current calculated power by this to ensure not to take too much energy from grid
#        "progressiveDelta":  500,                                   # if previous delivered energy delta was smaller than current one (delivered energy level is increasing) decrement current calculated power by this to ensure not to take too much energy from grid
#        "interfaces":
#        {
#            "EasyMeterInterface":
#            {
#                "connection": "Interface.Ethernet.EasyMeterTcpInterface.EasyMeterTcpInterface",
#                "messageLength":     2000,                                  # if more than that amount of data has been collected without a message found in it, simply throw it away to save some memory
#                "server":            "192.168.168.8",
#                "port":              4001
#            }
#        }
#    },


#    "WrEffektaWest":
#    {
#        "class":        "Inverter.EffektaController.EffektaController",
#        "interfaces":
#        {
#            "UartWrEffektaWest":
#            {
#                "connection":   "Interface.Uart.EffektaUartInterface.EffektaUartInterface",
#                "interface":    "/dev/serial/by-id/usb-FTDI_FT232R_USB_UART_A9HSILDS-if00-port0",
#                "baudrate":     2400
#            }
#        }
#    },

#    "Wetter":
#    {
#        "class": "Weather.Weather.WetterOnline",
#        "weatherUrl": "https://www.wetteronline.de/wetter/geratskirchen?prefpar=sun"
#    }

    # an @import tag will always overwrite existing values with the content of the given file independent from its position in the json file!
    # it will be handled only if it has been given at highest level and not somewhere inside a sub element!
    "@import": [
#        "./project_DummyInterface.json",
        "./project.json",
        "./secure.json"
    ]
}

