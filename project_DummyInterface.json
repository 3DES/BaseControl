{

    "MqttBridge":
    {
        "class":      "MqttBridge.MqttBridge.MqttBridge",
        "interfaces":
        {
            "Mosquitto":
            {
                "connection":   "Interface.Ethernet.MqttBrokerInterface.MqttBrokerInterface",
                "port":         1883,
                "sendRetained": false                       # for tests you can send not retained
            }
        }
    },

    "Logger":
    {
     "projectName":   "AccuTester"
     },

    "WrEffektaWest":
    {
        "class":        "Inverter.EffektaController.EffektaController",
        "interfaces":
        {
            "UartWrEffektaWest":
            {
                #"connection":   "Interface.Uart.EffektaUartInterface.EffektaUartInterface",
                "connection":   "Interface.Uart.DummyEffektaUartInterface.DummyEffektaUartInterface",
                "interface":    "COM4",
                "baudrate":     2400
            }
        }
    },

    "BMS":
    {
        "class":         "BMS.BasicBms.BasicBms",
        "relaisNames":   {"deviceName": "UsbRelais", "balanceRelais": "Relay6"},    # optional, but needs vbal in paramters
        "watchdogName":  "WdUsbRelais",                                               # optional
        #"parameters":    {"vBal": 3.5},                                             # optional
        "parameters":    {"vMin": 2.8, "vMax": 3.8, "vMinTimer": 60, "vBal": 3.5},  # optional
        "interfaces":
        {
            "BmsEins":
            {
                #"connection":   "Interface.Uart.WBmsUartInterface.WBmsUartInterface",
                "connection":   "Interface.Uart.DummyWBmsUartInterface.DummyWBmsUartInterface",
                "interface":    "COM4",
                "baudrate":     2400
            },
            "BmsZwei":
            {
                #"connection":   "Interface.Uart.WBmsUartInterface.WBmsUartInterface",
                "connection":   "Interface.Uart.DummyWBmsUartInterface.DummyWBmsUartInterface",
                "interface":    "COM4",
                "baudrate":     2400
            }
        }
    },

    "SocMonitor":
    {
        "class":        "GridLoad.SocMeter.SocMeter",
        "interfaces":
        {
            "UartSocMonitor":
            {
                #"connection":   "Interface.Uart.SocMeterUartInterface.SocMeterUartInterface",
                "connection":   "Interface.Uart.DummySocMeterUartInterface.DummySocMeterUartInterface",
                "interface":    "COM4",
                "baudrate":     9600
            }
        }
    },

    "UsbRelais":
    {
        "class":        "GPIO.BasicUsbRelais.BasicUsbRelais",
        "interfaces":
        {
            "UartUsbRelais":
            {
                #"connection":   "Interface.Uart.UsbRelaisUartInterface.UsbRelaisUartInterface",
                "connection":   "Interface.Uart.UartInterface.UartInterface",   # empty UArt Interface
                "interface":    "COM4",
                "baudrate":     115200
            }
        }
    },

#    "WdUsbRelais":
#    {
#        "class":           "GPIO.BasicUsbRelais.BasicUsbRelais",
#        "triggerThread":   "BMS",
#        "interfaces":
#        {
#            "WdUartUsbRelais":
#            {
#                #"connection":   "Interface.Uart.UsbRelaisUartInterface.UsbRelaisUartInterface",
#                #"connection":   "Interface.Uart.UartInterface.UartInterface",   # empty UArt Interface
#                "connection":   "Interface.Uart.WatchdogRelaisUartInterface.WatchdogRelaisUartInterface",
#                "firmware":     "firmware.hex",
#                "interface":    "COM5",
#                "baudrate":     9600
#            }
#        }
#    },

#    "Pylontech":
#    {
#        "class":        "BMS.BasicBms.BasicBms",
#        "interfaces":
#        {
#            "PylontechInterface":
#            {
#                "connection":   "Interface.Uart.Pylontech485Interface.Pylontech485Interface",
#                "interface":    "COM7",
#                "battCount":    1,
#                "baudrate":     115200
#            }
#        }
#    },

#    "Epever":
#    {
#        "class":        "Charger.GenericCharger.GenericCharger",
#        "interfaces":
#        {
#            "EpeverInterface":
#            {
#                "connection":   "Interface.Uart.Epever485Interface.Epever485Interface",
#                "interface":    "COM9",
#                "address":     1
#            }
#        }
#    },

#    "PowerPlant":
#    {
#        "socMonitorName": "Pylontech",
#        "bmsName": "Pylontech"
#    },

#    "WatchDog":
#    {
#        "class":      "WatchDog.WatchDog.WatchDog",
#        "interfaces":
#        {
#        },
#        "setupTime":       20,              # additional time until first check if all threads and only these are registered to give the threads some time to come up (timeout will happen after setupTime + triggerTime + timeout)
#        "triggerTime":     10,              # after that time threads should start sending alive message to watch dog
#        "timeout":         10,              # n seconds timeout after ticker time, after triggerTime + timeout watch dog will raise an Exception
#        "warningTime":     3,               # if minimum measured remaining timeout time is less or equal warningTime log a warning to inform the user about critical timing
#        "expectThreads":                    # expected threads
#        [
#            "Logger",
#            "PowerPlant",
#            "Mosquitto",
#            "MqttBridge",
#            "WrEffektaWest",
#            "BMS",
#            "SocMonitor",
#            "UsbRelais"
#        ],
#        "ignoreThreads":                    # no timeout monitoring for these ones... but they have to be included in expectedThreads
#        [
#            "UartWrEffektaWest",
#            "UartBMS",
#            "UartSocMonitor",
#            "UartUsbRelais",
#            "Wetter"
#        ],
#        "logUpTime":          60            # every 60 seconds create up time message
#    },

    "Wetter":
    {
        "class": "Weather.Weather.WetterOnline",
        "weatherUrl": "https://www.wetteronline.de/wetter/geratskirchen?prefpar=sun"
    }

}

